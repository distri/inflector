// Generated by CoffeeScript 1.6.3
(function() {
  var ErrorReporter, Inflector, bindUpdates, createEditor, processLines;

  Inflector = require("./dist/inflector.js");

  createEditor = function(code, destination) {
    var annotationElement, contentElement, editorElement, exampleSection, runtimeElement;
    exampleSection = $("<li>", {
      "class": "example"
    });
    annotationElement = $("<div>", {
      "class": "annotation"
    });
    editorElement = $("<textarea>", {
      "class": "annotation",
      text: code
    });
    contentElement = $("<div>", {
      "class": "content"
    });
    runtimeElement = $("<pre>");
    contentElement.append(runtimeElement);
    annotationElement.append(editorElement);
    exampleSection.append(annotationElement);
    exampleSection.append(contentElement);
    destination.after(exampleSection);
    return bindUpdates(editorElement, runtimeElement);
  };

  bindUpdates = function(editorElement, runtimeElement) {
    return editorElement.on("keyup", function() {
      var e, report, source;
      report = ErrorReporter(editorElement);
      source = editorElement.val();
      try {
        runtimeElement.text(processLines(source.split("\n")).join("\n"));
        return report.clear();
      } catch (_error) {
        e = _error;
        return report(e);
      }
    });
  };

  processLines = function(lines) {
    var shebang;
    shebang = lines.shift().slice(3);
    return lines.map(function(line) {
      return Inflector[shebang](line);
    });
  };

  ErrorReporter = function(editor) {
    var reporter;
    reporter = function(error) {
      var errorParagraph;
      if (editor.next().is("p.error")) {
        return editor.next().text(error);
      } else {
        errorParagraph = $("<p>", {
          "class": "error",
          text: error.toString()
        });
        return editor.after(errorParagraph);
      }
    };
    reporter.clear = function() {
      if (editor.next().is("p.error")) {
        return editor.next().remove();
      }
    };
    return reporter;
  };

  $("blockquote > pre > code").each(function() {
    var blockQuoteElement, code, codeElement, sectionElement;
    codeElement = $(this);
    blockQuoteElement = codeElement.parent().parent();
    code = codeElement.text();
    sectionElement = blockQuoteElement.parent().parent();
    blockQuoteElement.remove();
    return createEditor(code, sectionElement);
  });

  $('#container').on('keyup', 'textarea', function() {
    $(this).height(0);
    return $(this).height(this.scrollHeight);
  }).find('textarea').keyup();

}).call(this);
